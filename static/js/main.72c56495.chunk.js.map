{"version":3,"sources":["Map.js","App.js","index.js"],"names":["mapStyles","position","width","height","DriverLocation","_React$Component","props","_this","Object","classCallCheck","this","_this$props$initialCe","possibleConstructorReturn","getPrototypeOf","call","initialCenter","lat","lng","state","driverLocation","inherits","createClass","key","value","prevProps","prevState","google","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","_this2","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","_this$state$driverLoc","mapConfig","assign","Map","_this3","children","React","Children","c","cloneElement","mapCenter","style","react_default","a","createElement","ref","renderChildren","Component","defaultProps","visible","MapContainer","_Component","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","concat","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","dist","onClick","name","GoogleApiWrapper","apiKey","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.72c56495.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\n\nexport class DriverLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      driverLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.driverLocation !== this.state.driverLocation) {\n      this.recenterMap();\n    }\n  }\n\n   recenterMap() {\n    const map = this.map;\n    const current = this.state.driverLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            driverLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.driverLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.driverLocation\n      });\n    });\n  }\n\n  render() {\n     const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n\n}\nexport default DriverLocation;\n\nDriverLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n      lat: 0.135502,\n      lng: 32.721040\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n","import React, { Component } from 'react';\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n\nimport DriverLocation from './Map';\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  };\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    return (\n      <DriverLocation centerAroundCurrentLocation google={this.props.google}>\n        <Marker onClick={this.onMarkerClick} name={'driver location'} />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </DriverLocation>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDYXogTmMXbKU1OvVff0wo8wzAk83o7Fc0'\n})(MapContainer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}