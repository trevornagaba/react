{"version":3,"sources":["Map.js","App.js","index.js"],"names":["mapStyles","position","width","height","DriverLocation","_React$Component","props","_this","Object","classCallCheck","this","_this$props$initialCe","possibleConstructorReturn","getPrototypeOf","call","initialCenter","lat","lng","state","driverLocation","inherits","createClass","key","value","prevProps","prevState","google","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","_this2","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","_this$state$driverLoc","mapConfig","assign","Map","_this3","children","React","Children","c","cloneElement","mapCenter","style","react_default","a","createElement","ref","renderChildren","Component","defaultProps","visible","MapContainer","_Component","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","concat","markerClicked","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onMouseoverMarker","onMouseoutMarker","onClose","dist","onMouseover","onClick","onMouseout","name","GoogleApiWrapper","apiKey","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.84e04c7c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\n\nexport class DriverLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    // const lat = this.props.initialCenter.lat\n    // const lng = this.props.initialCenter.lng\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      driverLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n\n  // The <Map /> api includes subcomponents intended on being used as children of the Map component. \n  // Any child can be used within the Map component and will receive the three props (as children):\n  // map - the Google instance of the map\n  // google - a reference to the window.google object\n  // mapCenter - the google.maps.LatLng() object referring to the center of the map instance\n\n\n  // Takes prevProps and prevState as arguements\n  // Is invoked immediately after updating occurs\n  componentDidUpdate(prevProps, prevState) {\n    // If the reference to the window.google object has changed\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    // If driver location has changed\n    if (prevState.driverLocation !== this.state.driverLocation) {\n      this.recenterMap();\n    }\n  }\n\n   recenterMap() {\n    // The <Map /> api includes subcomponents intended on being used as children of the Map component. \n    // Any child can be used within the Map component and will receive the three props (as children):\n    // map - the Google instance of the map\n    // google - a reference to the window.google object\n    // mapCenter - the google.maps.LatLng() object referring to the center of the map instance\n\n    const map = this.map;\n    const current = this.state.driverLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            driverLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  loadMap() {\n    // Check if google is available\n    if (this.props && this.props.google) {\n      // If it is, we'll be using the map key on the object, so let's extract it here:\n      const { google } = this.props;\n      const maps = google.maps;\n\n\n      // The loadMap() function is only called after the component has been rendered (i.e. there is a DOM component on the page), \n      // so we'll need to grab a reference to the DOM component where we want the map to be placed. \n      // In our render method, we have a <div> component with a ref='map'. \n      // We can grab a reference to this component using the ReactDOM library:\n      // this.ref. map refers to the div element with a ref = \"map\"\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element with the ref\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      // Same as zoom = this.props.zoom\n      // Will be the default zoom in this case\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.driverLocation;\n      // Sent from the google maps API\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map as per the actual google maps documentation\n      // which says;  \n      // map = new google.maps.Map(document.getElementById('map'), {\n      //   center: {lat: -34.397, lng: 150.644},\n      //   zoom: 8\n      // });\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    // Destructuring object assignment\n    // a shorthand way to get the object properties' value from an object(such as this.props in here).\n    // So when you want to extract a property named 'var1' and 'var2' from the 'this.props', by writing the instruction:\n    // const { var1, var2 } = this.props;\n    // Same as const children = this.props.children\n    // Curly braces { } Tells JSX to handle content as javacript instead of a string and therefore use the variable\n    // Curly braces after the equals sign are an object declaration and in the comment below they (inner ones) are used to refernce an object\n\n    // The children here are the centerAroundCurrentLocation and google={this.props.google} passed from App.js\n    const { children } = this.props;\n\n    // Without the above declaration, we could write the function as if (!{{ this.props.children }})\n    if (!children) return;\n\n    // The map() method creates a new array with the results of calling a provided function on every element in the calling array\n    return React.Children.map(children, c => {\n      if (!c) return;\n\n      // Clone and return a new React element using element as the starting point.\n      // The resulting element will have the original element’s props with the new props merged in shallowly.\n      // New children will replace existing children. key and ref from the original element will be preserved.\n\n      // Replace with createElement so as to have multiple locations and not overwrite\n      return React.cloneElement(c, {\n        // \n        map: this.map,\n        // From the props passed from App.js\n        google: this.props.google,\n        // From the original state in constructor\n        mapCenter: this.state.driverLocation\n      });\n    });\n  }\n\n  render() {\n    // Make a new copy of the mapStyles object\n    const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n\n}\nexport default DriverLocation;\n\n// Define prop types, best practice for resusability\nDriverLocation.propTypes = {\n  google: React.PropTypes.object,\n  zoom: React.PropTypes.number,\n  initialCenter: React.PropTypes.object\n}\n\nDriverLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n      lat: 0.135502,\n      lng: 32.721040\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n","import React, { Component } from 'react';\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n\nimport DriverLocation from './Map';\n\nexport class MapContainer extends Component {\n    state = {\n        markerClicked: false,\n        showingInfoWindow: false,  //Hides or the shows the infoWindow\n        activeMarker: {},          //Shows the active marker upon click\n        selectedPlace: {}\n    };\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            markerClicked: true\n        })\n    };\n\n    onMouseoverMarker = (props, marker, e) => {\n        if (!this.state.showingInfoWindow) {\n            this.setState({\n                selectedPlace: props,\n                activeMarker: marker,\n                showingInfoWindow: true\n            })\n        }\n    };\n\n    onMouseoutMarker = props => {\n        if (!this.state.markerClicked) {\n            if (this.state.showingInfoWindow) {\n                this.setState({\n                    showingInfoWindow: false,\n                    activeMarker: null\n                });\n            }\n        }\n    }\n\n    onClose = props => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                markerClicked: false,\n                showingInfoWindow: false,\n                activeMarker: null\n            });\n        }\n    };\n\n    render() {\n        return (\n        <DriverLocation centerAroundCurrentLocation google={this.props.google}>\n            <Marker\n                onMouseover={this.onMouseoverMarker}\n                onClick={this.onMarkerClick}\n                onMouseout={this.onMouseoutMarker}\n                name={'marker'}\n            />\n            <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n            >\n            <div>\n                <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n            </InfoWindow>\n        </DriverLocation>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDYXogTmMXbKU1OvVff0wo8wzAk83o7Fc0'\n})(MapContainer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}